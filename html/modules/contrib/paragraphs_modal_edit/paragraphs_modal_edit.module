<?php

/**
 * @file
 * paragraphs_modal_edit.module
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\paragraphs\ParagraphInterface;
use Drupal\node\Entity\Node;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\Core\Ajax\RemoveCommand;
use Drupal\Core\Ajax\ReplaceCommand;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\CloseModalDialogCommand;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_form_alter().
 */
function paragraphs_modal_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $request = Drupal::request();
  $is_ajax = $request->isXmlHttpRequest();
  if (!$is_ajax) {
    return;
  }

  // Check if this is a paragraph delete form.
  if (strpos($form_id, 'paragraph_') === 0 && strpos($form_id, '_delete_form') === (strlen($form_id) - strlen('_delete_form'))) {
    $form['actions']['submit']['#ajax']['callback'] = 'paragraphs_modal_edit_paragraph_form_ajax_remove';
    $form['actions']['submit']['#ajax']['disable-refocus'] = TRUE;
  }
  // Check if this is a paragraph clone form.
  if (strpos($form_id, 'paragraph_') === 0 && strpos($form_id, '_clone_form') === (strlen($form_id) - strlen('_clone_form'))) {
    $form['actions']['submit']['#ajax']['callback'] = 'paragraphs_modal_edit_paragraph_form_ajax_update';
    $form['actions']['submit']['#ajax']['disable-refocus'] = TRUE;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Ajaxify the paragraph edit form.
 */
function paragraphs_modal_edit_form_paragraph_form_alter(&$form, FormStateInterface $form_state) {
  $request = Drupal::request();
  $is_ajax = $request->isXmlHttpRequest();

  // Check if this is loaded via ajax.
  if ($is_ajax && !empty($form['actions']['submit'])) {
    $form['actions']['submit']['#ajax']['callback'] = 'paragraphs_modal_edit_paragraph_form_ajax_update';
    $form['actions']['submit']['#ajax']['disable-refocus'] = TRUE;
  }
}

/**
 * Ajax callback for the modal save action.
 */
function paragraphs_modal_edit_paragraph_form_ajax_update(&$form, FormStateInterface $form_state) {
  if (!$form_state->getErrors()) {
    $response = new AjaxResponse();
    $response->addCommand(new CloseModalDialogCommand());

    $buildInfo = $form_state->getBuildInfo();
    if (!empty($buildInfo['callback_object'])) {
      $callbackObject = $buildInfo['callback_object'];
      /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
      $paragraph = $callbackObject->getEntity();

      // Check if the paragraph we render here is the latest revision.
      // If not, load and render it.
      $storage = Drupal::entityTypeManager()->getStorage('paragraph');
      $latestRevisionId = $storage->getLatestRevisionId($paragraph->id());
      $loadedRevisionId = (int) $paragraph->getLoadedRevisionId();
      if ($latestRevisionId != $loadedRevisionId) {
        $paragraph = $storage->loadRevision($latestRevisionId);
      }

      $paragraphViewArr = Drupal::entityTypeManager()->getViewBuilder('paragraph')->view($paragraph);
      $renderedParagraph = Drupal::service('renderer')->render($paragraphViewArr);

      $response->addCommand(new ReplaceCommand('[data-quickedit-entity-id="paragraph/' . $paragraph->id() . '"]', $renderedParagraph));
    }

    return $response;
  }

  return $form;
}

/**
 * Function form_ajax_remove()
 */
function paragraphs_modal_edit_paragraph_form_ajax_remove(&$form, FormStateInterface $form_state) {
  if (!$form_state->getErrors()) {
    $response = new AjaxResponse();
    $response->addCommand(new CloseModalDialogCommand());

    $buildInfo = $form_state->getBuildInfo();
    if (!empty($buildInfo['callback_object'])) {
      $callbackObject = $buildInfo['callback_object'];
      /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
      $paragraph = $callbackObject->getEntity();

      $paragraphViewArr = Drupal::entityTypeManager()->getViewBuilder('paragraph')->view($paragraph);
      $renderedParagraph = Drupal::service('renderer')->render($paragraphViewArr);

      $response->addCommand(new RemoveCommand('[data-quickedit-entity-id="paragraph/' . $paragraph->id() . '"]'));
    }

    return $response;
  }

  return $form;
}

/**
 * Function form_ajax_cancel()
 */
function paragraphs_modal_edit_paragraph_form_ajax_cancel(&$form, FormStateInterface $form_state) {
  if (!$form_state->getErrors()) {
    $response = new AjaxResponse();
    $response->addCommand(new CloseModalDialogCommand());

    return $response;
  }

  return $form;
}

/**
 * Function contextual_links_view_alter()
 */
function paragraphs_modal_edit_contextual_links_view_alter(&$element, $items) {
  $a = 1;

  if (isset($element['#contextual_links']['paragraph'])) {
    foreach ($element['#links'] as $key => &$link) {
      $link['attributes']['data-dialog-type'] = 'modal';
      // $link['attributes']['data-dialog-renderer'] = 'off_canvas';
      $link['attributes']['data-dialog-options'] = '{"width":"100%"}';
      $link['attributes']['class'][] = 'use-ajax';
    }
  }
}

/**
 * Implements hook_paragraph_update().
 *
 * Update the parent nodes last updated date.
 */
function paragraphs_modal_edit_paragraph_update(Paragraph $paragraph) {
  $routeName = Drupal::routeMatch()->getRouteName();
  if ($routeName == 'paragraphs_edit.edit_form') {
    $parent = $paragraph->getParentEntity();
    if ($parent instanceof Node) {
      $parent->setChangedTime(time());
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_view_alter() for paragraph entities.
 */
function paragraphs_modal_edit_paragraph_view_alter(array &$build, ParagraphInterface $entity, EntityViewDisplayInterface $display) {
  if (!Drupal::routeMatch()->getRouteName() == 'paragraphs_edit.edit_form') {
    return;
  }

  $root_parent = \Drupal::service('paragraphs_edit.lineage.inspector')->getRootParent($entity);
  if ($root_parent) {
    $build['#contextual_links']['paragraph'] = [
      'route_parameters' => [
        'root_parent_type' => $root_parent->getEntityTypeId(),
        'root_parent' => $root_parent->id(),
        'paragraph' => $entity->id(),
      ],
      'metadata' => ['changed' => $root_parent->getChangedTime()],
    ];
  }
}
