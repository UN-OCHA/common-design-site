<?php

/**
 * @file
 * Contains paragraphs_view_mode.module functions.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\paragraphs\ParagraphInterface;
use Drupal\paragraph_view_mode\StorageManagerInterface;
use Drupal\paragraph_view_mode\ViewModeInterface;

/**
 * Implements hook_help().
 */
function paragraph_view_mode_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.paragraph_view_mode':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('This module allows to dynamically pick the display mode of the paragraph during adding/editing the paragraph item, by creating a field with available view modes.') . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Enable view mode field on paragraph type') . '</dt>';
      $output .= '<dd>' . t('Go to edit page of your paragraph type and check option "Enable paragraph view mode field on this paragraph type.". Save.') . '</dd>';
      $output .= '<dt>' . t('Add field to add/edit form') . '</dt>';
      $output .= '<dd>' . t('Go to the "Manage form display" tab and place your field anywhere you want (except the disabled section).') . '</dd>';
      $output .= '<dt>' . t('Widget settings') . '</dt>';
      $output .= '<dd>' . t('You can configure the field widget, by selecting which view modes you want to allow to view during adding/editing the content. If you do not select any view mode, the "default" will be displayed.') . '</dd>';
      $output .= '</dl>';
      return $output;
  }
}

/**
 * Implements hook_entity_view_mode_alter().
 */
function paragraph_view_mode_entity_view_mode_alter(&$view_mode, EntityInterface $entity, $context) {
  if (!$entity instanceof ParagraphInterface) {
    return;
  }

  $field_name = StorageManagerInterface::FIELD_NAME;
  if (!$entity->hasField($field_name) || $view_mode === ViewModeInterface::PREVIEW) {
    return;
  }

  $view_mode = $entity->get($field_name)->value ?: $view_mode;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function paragraph_view_mode_form_paragraphs_type_edit_form_alter(&$form, FormStateInterface $formState) {
  $paragraph = $formState->getFormObject();
  $paragraphType = $paragraph->getEntity();

  $config_name = StorageManagerInterface::CONFIG_NAME;

  $form[$config_name] = [
    '#title' => t(StorageManagerInterface::FIELD_LABEL),
    '#type' => 'details',
    '#tree' => TRUE,
    '#open' => TRUE,
  ];

  $form[$config_name]['enabled'] = [
    '#title' => t('Enable @label field on this @type type.', [
      '@label' => StorageManagerInterface::FIELD_LABEL,
      '@type' => StorageManagerInterface::ENTITY_TYPE,
    ]),
    '#type' => 'checkbox',
    '#default_value' => $paragraphType->getThirdPartySetting($config_name, 'enabled') ?: FALSE,
  ];

  $form['actions']['submit']['#submit'][] = 'paragraph_view_mode_form_paragraphs_type_edit_form_submit';
}

/**
 * Paragraph view mode form submit.
 *
 * @param array $form
 *   Form structure.
 * @param \Drupal\Core\Form\FormStateInterface $formState
 *   Form state object.
 */
function paragraph_view_mode_form_paragraphs_type_edit_form_submit(array &$form, FormStateInterface $formState) {
  $config_name = StorageManagerInterface::CONFIG_NAME;
  $enable = $formState->getValue([$config_name, 'enabled']);

  $paragraphType = $formState->getFormObject()->getEntity();
  $bundle = $paragraphType->getOriginalId();

  $storage_manager = \Drupal::service('paragraph_view_mode.storage_manager');

  if (!empty($enable)) {
    $enable = $storage_manager->addField($bundle);
    if ($enable) {
      $storage_manager->addToFormDisplay($bundle);
    }
  }
  else {
    $enable = !$storage_manager->deleteField($bundle);
  }

  $paragraphType->setThirdPartySetting($config_name, 'enabled', $enable);
  $paragraphType->save();
}
