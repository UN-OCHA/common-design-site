env:
  - PHP_VERSION=8.0
    - SITEID=common-design
  # - global:
  #   - NODE_ENV=travis

dist: focal
language: php
cache:
  directories:
  - $HOME/.composer
  - $HOME/.npm

php:
  - $PHP_VERSION

# Make sure we have a recent version of docker-compose.
addons:
  apt:
    packages:
      - docker-compose

services:
  - docker

before_script:
  # Ensure the PHP environment is ready.
  - phpenv rehash

  # Install the AWS CLI and login to the ECR. Credentials are secrets set via the UI.
  - if ! [ -x "$(command -v aws)" ]; then curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" ; unzip awscliv2.zip ; sudo ./aws/install ; fi
  - aws ecr-public get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin public.ecr.aws/unocha

  # Check the docker images we want actually exists.
  - grep 'unocha/unified-builder:' docker/Dockerfile | awk '{print $2}' | xargs docker pull
  - grep 'unocha/php-k8s:' docker/Dockerfile | awk '{print $2}' | xargs docker pull

  # Get docker information.
  - docker version
  - docker-compose version

  # Ensure the PHP environment is ready.
  - phpenv rehash

script:
  - cd ${TRAVIS_BUILD_DIR}

  - set -e
  # PHP linting
  - test ! -d ./html/themes/custom || find -L ./html/themes/custom -iregex '.*\.\(php\|module\|inc\|install\)$' -print0 | xargs -0 -n 1 -P 4 php -l
  - set +e

  # Build local image.
  - make

  # Create the site and support containers.
  - docker-compose -f ./tests/docker-compose.yml up -d

  # Dump some information about the created containers.
  - docker ps -a

  # Wait a bit for containers to be ready.
  - sleep 10

  # Install the dev dependencies.
  - docker exec -it -u appuser -w /srv/www "${SITEID}-site" sh -c "composer install"

  # Check coding standards.
  - docker exec -it -u appuser -w /srv/www "${SITEID}-site" ./vendor/bin/phpcs -p --report=full --standard=phpcs.xml ./html/themes/custom

  # Comment out tests until the rest is working.
  # # Nodify.
  # - docker exec -it -u appuser -w /srv/www "${SITEID}-site" npm i

  # # Theme build.
  # - docker exec -it -u appuser -w /srv/www "${SITEID}-site" composer run sass

  # # Run unit tests.
  # - docker exec -it -u root -w /srv/www "${SITEID}-site" mkdir -p /srv/www/html/sites/default/files/browser_output
  # - docker exec -it -u root -w /srv/www -e BROWSERTEST_OUTPUT_DIRECTORY=/srv/www/html/sites/default/files/browser_output "${SITEID}-site" ./vendor/bin/phpunit --testsuite Unit --debug

  # Install the site with existing config.
  - docker exec -it "${SITEID}-site" drush -y si --existing-config minimal install_configure_form.enable_update_status_emails=NULL
  - docker exec -it "${SITEID}-site" drush -y en dblog
  - docker exec -it -w /srv/www "${SITEID}-site" drush -y cset system.site uuid $(grep uuid ./config/system.site.yml | awk '{print $2}')
  - docker exec -it -w /srv/www "${SITEID}-site" drush sqlc < zcat ./tests/sample_data/sample.sql.gz
  - docker exec -it "${SITEID}-site" drush -y cim --source=/srv/www/config
  - docker exec -it "${SITEID}-site" drush -y cim --partial --source=./tests/config
  - docker exec -it "${SITEID}-site" drush php-eval 'node_access_rebuild();'
  - docker exec -it "${SITEID}-site" drush cr

  # # Run e2e tests.
  # - docker exec -it -u appuser -w /srv/www "${SITEID}-site" composer run e2e

after_success:
  - cd $TRAVIS_BUILD_DIR
  - killall -9 php
  - echo "The tests completed without errors."

after_failure:
  - echo "The tests failed. Please check the output above for problems."
  - docker exec -it "${SITEID}-site" drush watchdog:show --count=50 --extended
